{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class User {\n  constructor(status) {\n    this.status = status;\n  }\n}\nexport class JwtResponse {\n  constructor(jwttoken) {\n    this.jwttoken = jwttoken;\n  }\n}\nexport class AuthenticationService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  authenticate(username, password) {\n    return this.httpClient.post('http://localhost:8001/authenticate', {\n      username,\n      password\n    }).pipe(map(userData => {\n      sessionStorage.setItem('username', username);\n      let tokenStr = 'Bearer ' + userData.token;\n      sessionStorage.setItem('token', tokenStr);\n      sessionStorage.setItem('role', userData.role);\n      return userData;\n    }));\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('username');\n    return !(user == null);\n  }\n  logOut() {\n    sessionStorage.removeItem('username');\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,MAAM;;;AAE1B,OAAM,MAAOC,IAAI;EACfC,YAAmBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;;AAGtC,OAAM,MAAOC,WAAW;EACtBF,YAAmBG,QAAgB;IAAhB,aAAQ,GAARA,QAAQ;EAAW;;AAKxC,OAAM,MAAOC,qBAAqB;EAEjCJ,YAAoBK,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAE5CC,YAAY,CAACC,QAAQ,EAAEC,QAAQ;IAC7B,OAAO,IAAI,CAACH,UAAU,CACnBI,IAAI,CAAM,oCAAoC,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACvEE,IAAI,CACHZ,GAAG,CAAEa,QAAQ,IAAI;MACfC,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEN,QAAQ,CAAC;MAC5C,IAAIO,QAAQ,GAAG,SAAS,GAAGH,QAAQ,CAACI,KAAK;MACzCH,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEC,QAAQ,CAAC;MACzCF,cAAc,CAACC,OAAO,CAAC,MAAM,EAAEF,QAAQ,CAACK,IAAI,CAAC;MAC7C,OAAOL,QAAQ;IACjB,CAAC,CAAC,CACH;EACL;EAEAM,cAAc;IACZ,IAAIC,IAAI,GAAGN,cAAc,CAACO,OAAO,CAAC,UAAU,CAAC;IAC7C,OAAO,EAAED,IAAI,IAAI,IAAI,CAAC;EACxB;EAEAE,MAAM;IACJR,cAAc,CAACS,UAAU,CAAC,UAAU,CAAC;EACvC;;AAzBWjB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAkB,SAArBlB,qBAAqB;EAAAmB,YAFpB;AAAM","names":["map","User","constructor","status","JwtResponse","jwttoken","AuthenticationService","httpClient","authenticate","username","password","post","pipe","userData","sessionStorage","setItem","tokenStr","token","role","isUserLoggedIn","user","getItem","logOut","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SupriyaSwain\\Desktop\\ANN-ECOM-master\\ANN-ECOM-master\\ANN-ECOM\\src\\app\\service\\authentication.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs';\n\nexport class User {\n  constructor(public status: string) {}\n}\n\nexport class JwtResponse {\n  constructor(public jwttoken: string) {}\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n constructor(private httpClient: HttpClient) {}\n\n  authenticate(username, password) {\n    return this.httpClient\n      .post<any>('http://localhost:8001/authenticate', { username, password })\n      .pipe(\n        map((userData) => {\n          sessionStorage.setItem('username', username);\n          let tokenStr = 'Bearer ' + userData.token;\n          sessionStorage.setItem('token', tokenStr);\n          sessionStorage.setItem('role', userData.role);\n          return userData;\n        })\n      );\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('username');\n    return !(user == null);\n  }\n\n  logOut() {\n    sessionStorage.removeItem('username');\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}