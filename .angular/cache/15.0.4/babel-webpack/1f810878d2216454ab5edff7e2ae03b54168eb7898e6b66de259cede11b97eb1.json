{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport swal from 'sweetalert2';\nimport { MustMatch } from './confirm-equal-validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_button_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵtext(1, \" Sign Up \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.form.valid);\n  }\n}\nfunction RegisterComponent_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 24);\n    i0.ɵɵelement(1, \"i\", 25);\n    i0.ɵɵtext(2, \" Please wait \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst baseUrl = 'http://localhost:8001/user/register';\nexport class RegisterComponent {\n  constructor(httpClient, router, formBuilder) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.user = {\n      name: '',\n      username: '',\n      password: '',\n      confirmPassword: ''\n    };\n    this.submitted = false;\n    this.loading = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      name: [null, Validators.required],\n      username: [null, [Validators.required, Validators.email]],\n      password: [null, [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n  }\n  saveUser() {\n    const data = {\n      name: this.user.name,\n      username: this.user.username,\n      password: this.user.password\n    };\n    this.httpClient.post(baseUrl, data, {\n      responseType: 'text'\n    }).subscribe(response => {\n      this.loading = true;\n      console.log(response);\n      if (response === 'Username already Taken') {\n        swal.fire('Error', 'username already taken!! Try again.', 'error');\n        this.submitted = false;\n        this.loading = false;\n      } else {\n        this.loading = true;\n        this.submitted = true;\n        swal.fire('User created', 'Your account has been successfully created', 'success');\n        this.router.navigate(['/login']);\n      }\n    }, error => {\n      this.loading = false;\n      swal.fire('Error', 'Something went wrong!', 'error');\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 31,\n  vars: 7,\n  consts: [[1, \"modal-body\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-lg-4\", \"m-auto\"], [1, \"form-container\"], [1, \"card\", \"mt-2\", \"bg-white\"], [1, \"card-title\", \"text-center\", \"mt-3\"], [\"src\", \"../../../assets/images/AvtarNew.png\", \"height\", \"140px\", \"width\", \"140px\", 1, \"img-rounded\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"input-group\", \"mb-3\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Name \", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\"], [\"type\", \"email\", \"name\", \"username\", \"id\", \"email\", \"placeholder\", \"Email \", \"formControlName\", \"username\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"inputPassword\"], [\"type\", \"password\", \"id\", \"inputPassword\", \"name\", \"password\", \"placeholder\", \"Password minimum length 6\", \"formControlName\", \"password\", \"required\", \"\", 1, \"form-control\", \"password\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"placeholder\", \"Confirm password\", \"name\", \"confirmPassword\", \"required\", \"\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", \"password\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", \"class\", \"btn btn-block\", \"style\", \"background-color: #00b0ff; color: #fff\", 3, \"disabled\", 4, \"ngIf\", \"ngIfElse\"], [\"loaded\", \"\"], [1, \"float-right\", \"mt-2\"], [\"routerLink\", \"/login\", 2, \"color\", \"#00b0ff\"], [\"type\", \"submit\", 1, \"btn\", \"btn-block\", 2, \"background-color\", \"#00b0ff\", \"color\", \"#fff\", 3, \"disabled\"], [\"disabled\", \"\", 1, \"btn\", \"btn-block\", 2, \"background-color\", \"#00b0ff\", \"color\", \"#fff\"], [1, \"fa\", \"fa-spinner\", \"fa-pulse\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"form\", 4)(5, \"div\", 5)(6, \"div\", 6);\n      i0.ɵɵelement(7, \"img\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 8)(9, \"form\", 9);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.saveUser();\n      });\n      i0.ɵɵelementStart(10, \"div\", 10);\n      i0.ɵɵelement(11, \"label\", 11);\n      i0.ɵɵelementStart(12, \"input\", 12);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.user.name = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 10);\n      i0.ɵɵelement(14, \"label\", 13);\n      i0.ɵɵelementStart(15, \"input\", 14);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_15_listener($event) {\n        return ctx.user.username = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 10);\n      i0.ɵɵelement(17, \"label\", 15);\n      i0.ɵɵelementStart(18, \"input\", 16);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_18_listener($event) {\n        return ctx.user.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 10);\n      i0.ɵɵelement(20, \"label\", 17);\n      i0.ɵɵelementStart(21, \"input\", 18);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_21_listener($event) {\n        return ctx.user.confirmPassword = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(22, RegisterComponent_button_22_Template, 2, 1, \"button\", 19);\n      i0.ɵɵtemplate(23, RegisterComponent_ng_template_23_Template, 3, 0, \"ng-template\", null, 20, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(25, \"br\");\n      i0.ɵɵelementStart(26, \"p\", 21);\n      i0.ɵɵtext(27, \" Already have an account ?\");\n      i0.ɵɵelementStart(28, \"a\", 22);\n      i0.ɵɵtext(29, \" Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(30, \"br\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(24);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.name);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.username);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.password);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.confirmPassword);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.loading)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i4.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgForm, i3.FormGroupDirective, i3.FormControlName, i2.RouterLink],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","swal","MustMatch","i0","baseUrl","RegisterComponent","constructor","httpClient","router","formBuilder","name","username","password","confirmPassword","ngOnInit","form","group","required","email","minLength","validator","saveUser","data","user","post","responseType","subscribe","response","loading","console","log","fire","submitted","navigate","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\SupriyaSwain\\Desktop\\ANN-ECOM-master\\ANN-ECOM-master\\ANN-ECOM\\src\\app\\components\\register\\register.component.ts","C:\\Users\\SupriyaSwain\\Desktop\\ANN-ECOM-master\\ANN-ECOM-master\\ANN-ECOM\\src\\app\\components\\register\\register.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport swal from 'sweetalert2';\nimport { MustMatch } from './confirm-equal-validator';\n\nconst baseUrl = 'http://localhost:8001/user/register';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\nform: FormGroup;\n  user = {\n    name: '',\n    username: '',\n    password: '',\n    confirmPassword: '',\n  };\n  submitted = false;\n  loading = false;\n\n  constructor(\n    private httpClient: HttpClient,\n    private router: Router,\n    private formBuilder: FormBuilder,\n  ) {}\n\n  ngOnInit() {\n    this.form = this.formBuilder.group(\n      {\n        name: [null, Validators.required],\n        username: [null, [Validators.required, Validators.email]],\n        password: [null, [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required],\n      },\n      {\n        validator: MustMatch('password', 'confirmPassword'),\n      }\n    );\n  }\n\n  saveUser() {\n    const data = {\n      name: this.user.name,\n      username: this.user.username,\n      password: this.user.password\n    };\n\n    this.httpClient.post(baseUrl, data, { responseType: 'text' }).subscribe(\n      (response) => {\n        this.loading = true;\n        console.log(response);\n        if (response === 'Username already Taken') {\n          swal.fire('Error', 'username already taken!! Try again.', 'error');\n          this.submitted = false;\n          this.loading = false;\n        } else {\n          this.loading = true;\n            this.submitted = true;\n            swal.fire(\n              'User created',\n              'Your account has been successfully created',\n              'success'\n            );\n            this.router.navigate(['/login']);\n          \n        }\n      },\n      (error) => {\n        this.loading = false;\n        swal.fire('Error', 'Something went wrong!', 'error');\n      }\n    );\n  }\n\n}\n","<div class=\"modal-body\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-lg-4 m-auto\">\n        <form class=\"form-container\">\n          <div class=\"card mt-2 bg-white\">\n            <div class=\"card-title text-center mt-3\">\n              <img\n                src=\"../../../assets/images/AvtarNew.png\"\n                height=\"140px\"\n                width=\"140px\"\n                class=\"img-rounded\"\n              />\n            </div>\n            <div class=\"card-body\">\n              <form (ngSubmit)=\"saveUser()\" [formGroup]=\"form\">\n                <div class=\"input-group mb-3\">\n                  <label for=\"name\"></label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"name\"\n                    name=\"name\"\n                    formControlName=\"name\"\n                    placeholder=\"Name \"\n                    [(ngModel)]=\"user.name\"\n                    required\n                  />\n                </div>\n                <div class=\"input-group mb-3\">\n                  <label for=\"email\"></label>\n                  <input\n                    type=\"email\"\n                    name=\"username\"\n                    class=\"form-control\"\n                    id=\"email\"\n                    placeholder=\"Email \"\n                    [(ngModel)]=\"user.username\"\n                    formControlName=\"username\"\n                    required\n                  />\n                </div>\n                <div class=\"input-group mb-3\">\n                  <label for=\"inputPassword\"></label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control password\"\n                    id=\"inputPassword\"\n                    name=\"password\"\n                    placeholder=\"Password minimum length 6\"\n                    [(ngModel)]=\"user.password\"\n                    formControlName=\"password\"\n                    required\n                  />\n                </div>\n                <div class=\"input-group mb-3\">\n                  <label for=\"confirmPassword\"></label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control password\"\n                    id=\"confirmPassword\"\n                    placeholder=\"Confirm password\"\n                    [(ngModel)]=\"user.confirmPassword\"\n                    name=\"confirmPassword\"\n                    required\n                    formControlName=\"confirmPassword\"\n                  />\n                </div>\n\n                <button\n                  *ngIf=\"!loading; else loaded\"\n                  [disabled]=\"!form.valid\"\n                  type=\"submit\"\n                  class=\"btn btn-block\"\n                  style=\"background-color: #00b0ff; color: #fff\"\n                >\n                  Sign Up\n                </button>\n                <ng-template #loaded>\n                  <button\n                    disabled\n                    class=\"btn btn-block\"\n                    style=\"background-color: #00b0ff; color: #fff\"\n                  >\n                    <i class=\"fa fa-spinner fa-pulse\"></i> Please wait\n                  </button>\n                </ng-template>\n                <br />\n\n                <p class=\"float-right mt-2\">\n                  Already have an account ?<a\n                    routerLink=\"/login\"\n                    style=\"color: #00b0ff\"\n                  >\n                    Login</a\n                  >\n                </p>\n                <br />\n              </form>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}