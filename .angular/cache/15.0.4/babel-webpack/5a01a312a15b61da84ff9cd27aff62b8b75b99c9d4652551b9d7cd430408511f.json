{"ast":null,"code":"import { retry } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:8080/api/v1';\n  }\n  getAllProducts() {\n    return this.httpClient.get(`${this.baseUrl}/products`).pipe(retry(5));\n  }\n  getSelectedProduct(id) {\n    return this.httpClient.get(`${this.baseUrl}/products/${id}`).pipe(retry(5));\n  }\n  //post a Product\n  postProduct(Product, type) {\n    let user = sessionStorage.getItem('username');\n    return this.httpClient.post(`${this.baseUrl}/products/${user}/${type}`, Product);\n  }\n  //find by name containing\n  findByNameContaining(str) {\n    return this.httpClient.get(`${this.baseUrl}/searchproducts?str=${str}`);\n  }\n  //categories\n  getProductCategories() {\n    return this.httpClient.get(`${this.baseUrl}/categories`).pipe(retry(3));\n  }\n  getProductListByCategoryId(theCategoryId) {\n    return this.httpClient.get(`${this.baseUrl}/searchbycategory/${theCategoryId}`).pipe(retry(2));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAA0BA,KAAK,QAAQ,MAAM;;;AAO7C,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAHxB,YAAO,GAAG,8BAA8B;EAGD;EAE7CC,cAAc;IACZ,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,OAAO,WAAW,CAAC,CAACC,IAAI,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5E;EAGAQ,kBAAkB,CAACC,EAAU;IAC3B,OAAO,IAAI,CAACN,UAAU,CACnBE,GAAG,CAAU,GAAG,IAAI,CAACC,OAAO,aAAaG,EAAE,EAAE,CAAC,CAC9CF,IAAI,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;EACnB;EAEA;EACAU,WAAW,CAACC,OAAe,EAAEC,IAAY;IACvC,IAAIC,IAAI,GAAGC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IAC7C,OAAO,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAC,GAAG,IAAI,CAACV,OAAO,aAAaO,IAAI,IAAID,IAAI,EAAE,EAAED,OAAO,CAAC;EAClF;EAGA;EACAM,oBAAoB,CAACC,GAAW;IAC9B,OAAO,IAAI,CAACf,UAAU,CAACE,GAAG,CACxB,GAAG,IAAI,CAACC,OAAO,uBAAuBY,GAAG,EAAE,CAC5C;EACH;EAEA;EACAC,oBAAoB;IAClB,OAAO,IAAI,CAAChB,UAAU,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,OAAO,aAAa,CAAC,CAACC,IAAI,CAChEP,KAAK,CAAC,CAAC,CAAC,CAAC;EACb;EAGAoB,0BAA0B,CAACC,aAAqB;IAI9C,OAAO,IAAI,CAAClB,UAAU,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,OAAO,qBAAqBe,aAAa,EAAE,CAAC,CAACd,IAAI,CACvFP,KAAK,CAAC,CAAC,CAAC,CACT;EACH;;AA9CWC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YAFb;AAAM","names":["retry","ProductService","constructor","httpClient","getAllProducts","get","baseUrl","pipe","getSelectedProduct","id","postProduct","Product","type","user","sessionStorage","getItem","post","findByNameContaining","str","getProductCategories","getProductListByCategoryId","theCategoryId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\SupriyaSwain\\Desktop\\ANN-ECOM-master\\ANN-ECOM-master\\ANN-ECOM\\src\\app\\service\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, retry } from 'rxjs';\nimport { Category } from '../common/Category';\nimport { Product } from '../common/Product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\nprivate baseUrl = 'http://localhost:8080/api/v1';\n\n\n  constructor(private httpClient: HttpClient) {}\n\n  getAllProducts(): Observable<any> {\n    return this.httpClient.get<any>(`${this.baseUrl}/products`).pipe(retry(5));\n  }\n\n\n  getSelectedProduct(id: number): Observable<Product> {\n    return this.httpClient\n      .get<Product>(`${this.baseUrl}/products/${id}`)\n      .pipe(retry(5));\n  }\n\n  //post a Product\n  postProduct(Product: Object, type: number) {\n    let user = sessionStorage.getItem('username');\n    return this.httpClient.post(`${this.baseUrl}/products/${user}/${type}`, Product);\n  }\n\n\n  //find by name containing\n  findByNameContaining(str: string): Observable<any> {\n    return this.httpClient.get<any>(\n      `${this.baseUrl}/searchproducts?str=${str}`\n    );\n  }\n\n  //categories\n  getProductCategories(): Observable<Category[]> {\n    return this.httpClient.get<any>(`${this.baseUrl}/categories`).pipe(\n      retry(3));\n  }\n\n\n  getProductListByCategoryId(theCategoryId: number): Observable<Product[]> {\n\n\n\n    return this.httpClient.get<any>(`${this.baseUrl}/searchbycategory/${theCategoryId}`).pipe(\n      retry(2)\n    );\n  }\n  \n\n  \n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}